name: "Firmware Release"

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [esp32, esp32s2, esp32s3]
        config: [nosb, sb]
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Load SIGNING_KEY
      env:
        SECURE_BOOT_SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
      run: echo "$SECURE_BOOT_SIGNING_KEY" > ./secure_boot_signing_key.pem
    - name: esp-idf build
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp_idf_version: v5.4.1
        target: ${{ matrix.platform }}
        extra_docker_args: -e BUILD_CONFIG=${{ matrix.config }}
    - name: Remove SIGNING_KEY
      run: rm -f ./secure_boot_signing_key.pem
    - name: Upload artifact bin
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-${{ matrix.config }}
        path: build/${{ matrix.platform }}_*.bin

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: '*'
    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: "**/*.bin"
        generate_release_notes: true
        body: |
          ## Installation Instructions

          To set up your ESP32 controller with the firmware, begin by flashing the factory image. This image is used for the initial installation, while app images are specifically for OTA updates.

          ```bash
          esptool.py --chip <CHIP> -p <PORT> write_flash 0x0 <CHIP>_<SECURE_BOOT>_hello_world_${{ github.ref_name }}.factory.bin
          ```

          Make sure to replace the placeholders with the following:

          - `<CHIP>` with your ESP32 model (e.g., `esp32`, `esp32s2`, `esp32s3`)
          - `<PORT>` with your device's port (e.g., `/dev/ttyUSB0` or `COM3`)
          - `<SECURE_BOOT>` with `nosb` or `sb` depending on your secure boot preference
